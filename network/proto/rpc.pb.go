// Code generated by protoc-gen-go. DO NOT EDIT.
// source: network/proto/rpc.proto

/*
Package network is a generated protocol buffer package.

It is generated from these files:
	network/proto/rpc.proto

It has these top-level messages:
	Ping
	Pong
	GetPeersReq
	GetPeersRes
	BroadcastReq
	BroadcastRes
	TellReq
	TellRes
*/
package network

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

import (
	context "golang.org/x/net/context"
	grpc "google.golang.org/grpc"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type Ping struct {
	Nonce uint64 `protobuf:"varint,1,opt,name=nonce" json:"nonce,omitempty"`
	// Every one who participates into the network needs to tell others its address
	// TODO: Seperate it as a standalone protocol
	Addr string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
}

func (m *Ping) Reset()                    { *m = Ping{} }
func (m *Ping) String() string            { return proto.CompactTextString(m) }
func (*Ping) ProtoMessage()               {}
func (*Ping) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Ping) GetNonce() uint64 {
	if m != nil {
		return m.Nonce
	}
	return 0
}

func (m *Ping) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

type Pong struct {
	AckNonce uint64 `protobuf:"varint,1,opt,name=ack_nonce,json=ackNonce" json:"ack_nonce,omitempty"`
}

func (m *Pong) Reset()                    { *m = Pong{} }
func (m *Pong) String() string            { return proto.CompactTextString(m) }
func (*Pong) ProtoMessage()               {}
func (*Pong) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *Pong) GetAckNonce() uint64 {
	if m != nil {
		return m.AckNonce
	}
	return 0
}

type GetPeersReq struct {
	Count uint32 `protobuf:"varint,1,opt,name=count" json:"count,omitempty"`
}

func (m *GetPeersReq) Reset()                    { *m = GetPeersReq{} }
func (m *GetPeersReq) String() string            { return proto.CompactTextString(m) }
func (*GetPeersReq) ProtoMessage()               {}
func (*GetPeersReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *GetPeersReq) GetCount() uint32 {
	if m != nil {
		return m.Count
	}
	return 0
}

type GetPeersRes struct {
	Addr []string `protobuf:"bytes,1,rep,name=addr" json:"addr,omitempty"`
}

func (m *GetPeersRes) Reset()                    { *m = GetPeersRes{} }
func (m *GetPeersRes) String() string            { return proto.CompactTextString(m) }
func (*GetPeersRes) ProtoMessage()               {}
func (*GetPeersRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *GetPeersRes) GetAddr() []string {
	if m != nil {
		return m.Addr
	}
	return nil
}

type BroadcastReq struct {
	Header  uint32 `protobuf:"varint,1,opt,name=header" json:"header,omitempty"`
	MsgType uint32 `protobuf:"varint,2,opt,name=msg_type,json=msgType" json:"msg_type,omitempty"`
	MsgBody []byte `protobuf:"bytes,3,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"`
}

func (m *BroadcastReq) Reset()                    { *m = BroadcastReq{} }
func (m *BroadcastReq) String() string            { return proto.CompactTextString(m) }
func (*BroadcastReq) ProtoMessage()               {}
func (*BroadcastReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *BroadcastReq) GetHeader() uint32 {
	if m != nil {
		return m.Header
	}
	return 0
}

func (m *BroadcastReq) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *BroadcastReq) GetMsgBody() []byte {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

type BroadcastRes struct {
	Header uint32 `protobuf:"varint,1,opt,name=header" json:"header,omitempty"`
}

func (m *BroadcastRes) Reset()                    { *m = BroadcastRes{} }
func (m *BroadcastRes) String() string            { return proto.CompactTextString(m) }
func (*BroadcastRes) ProtoMessage()               {}
func (*BroadcastRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *BroadcastRes) GetHeader() uint32 {
	if m != nil {
		return m.Header
	}
	return 0
}

type TellReq struct {
	Header  uint32 `protobuf:"varint,1,opt,name=header" json:"header,omitempty"`
	Addr    string `protobuf:"bytes,2,opt,name=addr" json:"addr,omitempty"`
	MsgType uint32 `protobuf:"varint,3,opt,name=msg_type,json=msgType" json:"msg_type,omitempty"`
	MsgBody []byte `protobuf:"bytes,4,opt,name=msg_body,json=msgBody,proto3" json:"msg_body,omitempty"`
}

func (m *TellReq) Reset()                    { *m = TellReq{} }
func (m *TellReq) String() string            { return proto.CompactTextString(m) }
func (*TellReq) ProtoMessage()               {}
func (*TellReq) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *TellReq) GetHeader() uint32 {
	if m != nil {
		return m.Header
	}
	return 0
}

func (m *TellReq) GetAddr() string {
	if m != nil {
		return m.Addr
	}
	return ""
}

func (m *TellReq) GetMsgType() uint32 {
	if m != nil {
		return m.MsgType
	}
	return 0
}

func (m *TellReq) GetMsgBody() []byte {
	if m != nil {
		return m.MsgBody
	}
	return nil
}

type TellRes struct {
	Header uint32 `protobuf:"varint,1,opt,name=header" json:"header,omitempty"`
}

func (m *TellRes) Reset()                    { *m = TellRes{} }
func (m *TellRes) String() string            { return proto.CompactTextString(m) }
func (*TellRes) ProtoMessage()               {}
func (*TellRes) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *TellRes) GetHeader() uint32 {
	if m != nil {
		return m.Header
	}
	return 0
}

func init() {
	proto.RegisterType((*Ping)(nil), "network.Ping")
	proto.RegisterType((*Pong)(nil), "network.Pong")
	proto.RegisterType((*GetPeersReq)(nil), "network.GetPeersReq")
	proto.RegisterType((*GetPeersRes)(nil), "network.GetPeersRes")
	proto.RegisterType((*BroadcastReq)(nil), "network.BroadcastReq")
	proto.RegisterType((*BroadcastRes)(nil), "network.BroadcastRes")
	proto.RegisterType((*TellReq)(nil), "network.TellReq")
	proto.RegisterType((*TellRes)(nil), "network.TellRes")
}

// Reference imports to suppress errors if they are not otherwise used.
var _ context.Context
var _ grpc.ClientConn

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
const _ = grpc.SupportPackageIsVersion4

// Client API for Peer service

type PeerClient interface {
	Ping(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error)
	GetPeers(ctx context.Context, in *GetPeersReq, opts ...grpc.CallOption) (*GetPeersRes, error)
	Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastRes, error)
	Tell(ctx context.Context, in *TellReq, opts ...grpc.CallOption) (*TellRes, error)
}

type peerClient struct {
	cc *grpc.ClientConn
}

func NewPeerClient(cc *grpc.ClientConn) PeerClient {
	return &peerClient{cc}
}

func (c *peerClient) Ping(ctx context.Context, in *Ping, opts ...grpc.CallOption) (*Pong, error) {
	out := new(Pong)
	err := grpc.Invoke(ctx, "/network.Peer/ping", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) GetPeers(ctx context.Context, in *GetPeersReq, opts ...grpc.CallOption) (*GetPeersRes, error) {
	out := new(GetPeersRes)
	err := grpc.Invoke(ctx, "/network.Peer/getPeers", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) Broadcast(ctx context.Context, in *BroadcastReq, opts ...grpc.CallOption) (*BroadcastRes, error) {
	out := new(BroadcastRes)
	err := grpc.Invoke(ctx, "/network.Peer/broadcast", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *peerClient) Tell(ctx context.Context, in *TellReq, opts ...grpc.CallOption) (*TellRes, error) {
	out := new(TellRes)
	err := grpc.Invoke(ctx, "/network.Peer/tell", in, out, c.cc, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// Server API for Peer service

type PeerServer interface {
	Ping(context.Context, *Ping) (*Pong, error)
	GetPeers(context.Context, *GetPeersReq) (*GetPeersRes, error)
	Broadcast(context.Context, *BroadcastReq) (*BroadcastRes, error)
	Tell(context.Context, *TellReq) (*TellRes, error)
}

func RegisterPeerServer(s *grpc.Server, srv PeerServer) {
	s.RegisterService(&_Peer_serviceDesc, srv)
}

func _Peer_Ping_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(Ping)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Ping(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Peer/Ping",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Ping(ctx, req.(*Ping))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_GetPeers_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetPeersReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).GetPeers(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Peer/GetPeers",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).GetPeers(ctx, req.(*GetPeersReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_Broadcast_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(BroadcastReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Broadcast(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Peer/Broadcast",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Broadcast(ctx, req.(*BroadcastReq))
	}
	return interceptor(ctx, in, info, handler)
}

func _Peer_Tell_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(TellReq)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(PeerServer).Tell(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/network.Peer/Tell",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(PeerServer).Tell(ctx, req.(*TellReq))
	}
	return interceptor(ctx, in, info, handler)
}

var _Peer_serviceDesc = grpc.ServiceDesc{
	ServiceName: "network.Peer",
	HandlerType: (*PeerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "ping",
			Handler:    _Peer_Ping_Handler,
		},
		{
			MethodName: "getPeers",
			Handler:    _Peer_GetPeers_Handler,
		},
		{
			MethodName: "broadcast",
			Handler:    _Peer_Broadcast_Handler,
		},
		{
			MethodName: "tell",
			Handler:    _Peer_Tell_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "network/proto/rpc.proto",
}

func init() { proto.RegisterFile("network/proto/rpc.proto", fileDescriptor0) }

var fileDescriptor0 = []byte{
	// 340 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x7c, 0x52, 0xcd, 0x4a, 0xf3, 0x40,
	0x14, 0x6d, 0xbe, 0xce, 0xd7, 0x9f, 0x6b, 0x0b, 0x72, 0xa9, 0x5a, 0xe3, 0x26, 0x9d, 0x42, 0xe9,
	0x42, 0x5a, 0xd1, 0x8d, 0xe0, 0xae, 0x1b, 0x77, 0x52, 0x42, 0x97, 0x42, 0x49, 0x93, 0x4b, 0x94,
	0xa4, 0x33, 0x71, 0x66, 0x44, 0xf2, 0x9c, 0xbe, 0x90, 0x4c, 0x9a, 0x86, 0x54, 0x5a, 0x77, 0x73,
	0xee, 0xcf, 0xb9, 0x87, 0x73, 0x06, 0xae, 0x04, 0x99, 0x2f, 0xa9, 0x92, 0x79, 0xa6, 0xa4, 0x91,
	0x73, 0x95, 0x85, 0xb3, 0xe2, 0x85, 0xed, 0xb2, 0xc1, 0xef, 0x80, 0x2d, 0xdf, 0x45, 0x8c, 0x03,
	0xf8, 0x2f, 0xa4, 0x08, 0x69, 0xe8, 0x78, 0xce, 0x94, 0xf9, 0x3b, 0x80, 0x08, 0x2c, 0x88, 0x22,
	0x35, 0xfc, 0xe7, 0x39, 0xd3, 0xae, 0x5f, 0xbc, 0xf9, 0x18, 0xd8, 0x52, 0x8a, 0x18, 0x6f, 0xa0,
	0x1b, 0x84, 0xc9, 0xba, 0xbe, 0xd5, 0x09, 0xc2, 0xe4, 0xc5, 0x62, 0x3e, 0x86, 0xb3, 0x67, 0x32,
	0x4b, 0x22, 0xa5, 0x7d, 0xfa, 0xb0, 0xec, 0xa1, 0xfc, 0x14, 0xa6, 0x98, 0xeb, 0xfb, 0x3b, 0xc0,
	0x47, 0xf5, 0x21, 0x5d, 0x1d, 0x73, 0xbc, 0x66, 0x75, 0xec, 0x15, 0x7a, 0x0b, 0x25, 0x83, 0x28,
	0x0c, 0xb4, 0xb1, 0x44, 0x97, 0xd0, 0x7a, 0xa3, 0x20, 0x22, 0x55, 0x32, 0x95, 0x08, 0xaf, 0xa1,
	0xb3, 0xd5, 0xf1, 0xda, 0xe4, 0x19, 0x15, 0x62, 0xfb, 0x7e, 0x7b, 0xab, 0xe3, 0x55, 0x9e, 0xd1,
	0xbe, 0xb5, 0x91, 0x51, 0x3e, 0x6c, 0x7a, 0xce, 0xb4, 0x57, 0xb4, 0x16, 0x32, 0xca, 0xf9, 0xe4,
	0x80, 0x5d, 0x9f, 0x62, 0xe7, 0x09, 0xb4, 0x57, 0x94, 0xa6, 0x7f, 0x09, 0x38, 0xe2, 0xd4, 0x81,
	0xa8, 0xe6, 0x69, 0x51, 0xec, 0x50, 0xd4, 0x68, 0x7f, 0xec, 0xa4, 0x9e, 0xfb, 0x6f, 0x07, 0x98,
	0xb5, 0x0d, 0x27, 0xc0, 0x32, 0x9b, 0x5e, 0x7f, 0x56, 0xe6, 0x39, 0xb3, 0x61, 0xba, 0x35, 0x28,
	0x45, 0xcc, 0x1b, 0xf8, 0x08, 0x9d, 0xb8, 0x74, 0x1a, 0x07, 0x55, 0xb3, 0x96, 0x90, 0x7b, 0xac,
	0xaa, 0x79, 0x03, 0x9f, 0xa0, 0xbb, 0xd9, 0x5b, 0x84, 0x17, 0xd5, 0x50, 0x3d, 0x14, 0xf7, 0x68,
	0xd9, 0x2e, 0xdf, 0x02, 0x33, 0x94, 0xa6, 0x78, 0x5e, 0x0d, 0x94, 0x36, 0xba, 0xbf, 0x2b, 0x9a,
	0x37, 0x36, 0xad, 0xe2, 0x6b, 0x3e, 0xfc, 0x04, 0x00, 0x00, 0xff, 0xff, 0x16, 0x62, 0xc1, 0x08,
	0xb5, 0x02, 0x00, 0x00,
}
